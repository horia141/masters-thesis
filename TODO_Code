+ [29] B:14.03.2012 E:15.03.2012
  Task: Add a "image_resize_transform" which does resizing of
  "gray_images_set".
  Resolved: I've added the transform and some tests for it.

- [28] B:14.03.2012 E:??.??.????
  Task: Reorganize the file/module structure a little. For now, all classes
    live in the top-level. As we continue adding stuff, the top-level will
    become more crowded.

- [27] B:14.03.2012 E:??.??.????
  Task: Add a "normal_bayes_classifier" which does classification using Bayes
    rule and assuming data is distributed normally, given a class. 

- [26] B:14.03.2012 E:??.??.????
  Task: Add a "probs_classifier" which does classification based on the class
    with the highest probability. This is the simplest probabilistic
    classifier.

+ [25] B:14.03.2012 E:15.03.2012
  Task: Add a "means_classifier" which does classification based on the
    distances from a sample to the mean of a class. This is the simplest
    geometric classifier.
  Resolved: I've added the classifier and the usual tests for it.

- [24] B:14.03.2012 E:??.??.????
  Task: Add a whole sleuth of other transforms besides the "dct_transform".
    Think of "fourier_transform", "random_patches_transform" and
    "random_weights_transform".
   
- [23] B:13.03.2012 E:??.??.????
  Task: Add "dct_transform".

- [22] B:13.03.2012 E:??.??.????
  Task: "gray_images_set.load_csvfile" produces a "samples_set" object. This
    is not quite what a user of "gray_images_set" expects. In fact, a user of
    this class wouldn't use this methods to begin with. We must either mask it
    or make it do something useful for images.

- [21] B:13.03.2012 E:??.??.????
  Task: Make "display" variable passed to all tests a little bit more
    meaningful. It should have values "none", "slow", "fast", "step" for
    different levels of control.

- [20] B:13.03.2012 E:??.??.????
  Task: Lots of small tasks for "sparse_sgdmp_transform".
    * Change normalization code to work vectorized. Implement norm by hand
      and do fast matrix math on whole dict.
    * Store an learning rate schedule as a vector of learning rates at
      different times, computed from "initial_learning_rate",
      "final_learning_rate" and "max_iter_count". This will make calling
      "dict_gradient_descent" easier and will make it easier somewhat to
      change the learning rate schedule.
    * Make "matching_pursuit" work on multiple samples at a time. This is
      required both for fast batch mode operations and for fast coding.
    * Optionally make it accept an initial directory (for cases where you
      have hints of what a good directory might be or when you want to
      continue the training from a previous session). It could also accept a
      schedule parameter directly, instead of several schedule defining
      parameters.

- [19] B:13.03.2012 E:??.??.????
  Task: Add batch mode options for learning the dictionary. Currently it does
    only online learning. A "batch_size" parameter should control how many
    vectors are selected per update.

+ [18] B:13.03.2012 E:15.03.2012
  Task: Make the testing code for "gray_images_set" which load the MNIST
    training data, load a smaller set instead (either MNIST test data or a
    smaller version alltogether).
  Resolved: I've made the test use the MNIST test data.

- [17] B:13.03.2012 E:??.??.????
  Task: Transforms which require training should also store one sample of
    their training data. This should be used later in calls to "code" and
    "decode" for compatibility testing.

- [16] B:13.03.2012 E:??.??.????
  Task: We currently have no support for data of an unknown class. These
    appear quite a lot as data for which we have no labels and that we want to
    classify or as data for unsupervised pre-training. The support for this is
    "sketchy" at best: the "gray_images_set.load_from_dir" function assigns a
    class of "none" to the images it loaded. I should fix this. There should
    indeed be a special class, name it "__none__" or something which is not a
    valid label now, like -1, and make it present in every dataset "classes"
    list. Also a label index of -1 could mean that we don't know the class of
    the data. We should add the required code and add and change the required
    tests for this to work well. Transforms won't be affected by this change
    but classifiers should. They should ignore data that has the "__none__"
    label. This would be useful for "nicer" implementations of "one-vs-one"
    and "one-vs-all" classification. To prevent excessive copying we could
    also introduce a special mask operation so certain samples are ignored for
    purposes of classification etc.
    In any case, at first, think about this, then implement it, because it
    seems like a big change for the framework.

- [15] B:09.03.2012 E:??.??.????
  Task: Introduce more succint assertions for the objects we work with to use
    in tests. Instead of writing 10-15 assert statements, a function could
    take as parameters the desired form of an object and return true or false
    and the problem localization. 

- [14] B:09.03.2012 E:??.??.????
  Task: Make tests more to the point. We should test computed values to be of
    a certain value, instead of testing also for form, domain etc. There are
    some cases where, indeed, this cannot be done, but we should try to do it
    for the rest.

+ [13] B:08.03.2012 E:08.03.2012
  Task: Add a fast mode for testing where no display of images is done. This
    is also useful for running tests on other machines which may not have X.
  Resolved: I've added to all "test" functions an argument named "display". If
    this is present and "true" then image display occurs. This helps "all_tests"
   speed by a lot.

+ [12] B:08.03.2012 E:08.03.2012
  Task: There are bugs in the part of the test where we display images. More
   precisely, some figures are not properly closed after a test. I must make
   sure they work as intended.
  Resolved: I've made the code much simpler. It depends on MatLAB keeping
    track of the required interal figure handle and axis handle state.

+ [11] B:08.03.2012 E:08.03.2012
  Task: Whenever we test for an "object" we should also test for it being a
    scalar.
  Resolved: I've added the required checks.

- [10] B:08.03.2012 E:??.??.????
  Task: Add timing code to "all_tests" so we know how much time a full test
    suite takes.

+ [9] B:08.03.2012 E:08.03.2012
  Task: Add tests which work on images to "pca_transform",  "pca_whitening_transform"
    and "zca_transform". Also display the original images in the tests for
    "utils.remap_images_to_unit" because it is helpful to see how MatLAB displays
    such images badly.
  Resolved: I've added the image viewing code for "pca_transform" and
    "pca_whitening_transform" as it made the most sense there. Other commits
     have fixed the "utils.remap_images_to_unit" tests.

+ [8] B:07.03.2012 E:08.03.2012
  Task: There is a degree of non-uniformity in the logging for tests. I should
    fix this.
  Resolved: I've made all test logging messages follow a similar format and
    I've also made them more succint.

+ [7] B:07.03.2012 E:08.03.2012
  Task: Move all datasets used  in test in "$PROJECT_ROOT/data/test" so
    they'll be accessible no matter what.
  Resolved: I've moved all datesets used in testing in the required directory.

+ [6] B:06.03.2012 E:07.03.2012
  Task: In test functions add "printf" statements for subtests as well as full
    tests.
  Resolved: Added "printf" statements appropriate to each subtest.

+ [5] B:06.03.2012 E:07.03.2012
  Task: Make code that tests transforms use an approximate test for equality
    of samples. Due to numeric precision errors we might have problems in our
    tests. It's not something we want.
  Resolved: Added the function "utils.approx" and used it in all places where
    transform results comparisons were made.

+ [4] B:06.03.2012 E:06.03.2012
  Task: Add tests in "tc" structure functions for empty values. In particular,
    "tc.scalar", "tc.vector", "tc.matrix" and "tc.tensor" should return false on
    empty objects.
  Resolved: I've redefined the "type-tree" for this project and rewritten
    tests so they are simpler and more robust. Also, the structural functions
    have been modified as required by this task.

+ [3] B:06.03.2012 E:06.03.2012
  Task: Make all dependent properties be immutable. Since our objects contain
    only immutable fields, it makes no sense to have dependent properties. We
    can compute them only once, at construction time, and be done with
    that. This should reduce some of the clutter in "samples_set" and "gray_images_set".
  Resolved: Changed the properties in "samples_set" and "gray_images_set" to
    be immutable and computed in the constructor.

+ [2] B:05.03.2012 E:05.03.2012
  Task: In all "test" functions, make the destruction of objects between tests
    in the order of object creation. Alternatively, use "clear all".
  Resolved: Added a clear all after each test. Also, I've renamed objects so
    they are no longer unique at the function level. For example, most sample
    sets are now called "s"  instead of "s1", "s2" etc. Derived versions of
    such sets are, of course, still called "s_p", "s_f11" etc.

- [1] B:05.03.2012 E:??.??.????
  Task: Make use of the "Causes" field in MATLAB exception handling in the
    code so far. This seems like an implementation of the "hierarchical"
    exception handling I've been thinking about.
